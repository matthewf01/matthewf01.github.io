<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SS - Review Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <style>
        html {
            height: 100%;
        }
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f0f0;
            background-image:
                radial-gradient(at 0% 0%, hsla(200, 95%, 85%, 1) 0px, transparent 50%),
                radial-gradient(at 100% 0%, hsla(340, 95%, 85%, 1) 0px, transparent 50%),
                radial-gradient(at 0% 100%, hsla(100, 95%, 85%, 1) 0px, transparent 50%),
                radial-gradient(at 100% 100%, hsla(290, 95%, 85%, 1) 0px, transparent 50%);
        }
        .font-title {
            font-family: 'Playfair Display', serif;
        }

        .flash-correct {
            animation: flash-green 0.7s;
        }
        .flash-incorrect {
            animation: flash-red 0.7s;
        }
        @keyframes flash-green {
            from { background-color: #4ade80; } /* Lighter green */
        }
        @keyframes flash-red {
            from { background-color: #f87171; } /* Lighter red */
        }

        #study-guide-content {
            overflow: hidden;
            transition: max-height 0.5s ease-out, opacity 0.5s ease-out, margin-top 0.5s ease-out, padding-top 0.5s ease-out;
            max-height: 0;
            opacity: 0;
            margin-top: 0;
            padding-top: 0;
            border-width: 0;
        }
        #study-guide-content.expanded {
            max-height: 1500px; /* A large enough value to not clip content */
            opacity: 1;
            margin-top: 1.5rem; /* 6 */
            padding-top: 1.5rem; /* 6 */
            border-width: 2px 0 0 0; /* border-t-2 */
        }
        .rainbow-btn {
            background-image: linear-gradient(to right, #ef4444, #f97316, #eab308, #84cc16, #22c55e, #14b8a6, #06b6d4, #3b82f6, #8b5cf6, #d946ef);
            background-size: 200% auto;
            transition: background-position 0.5s ease-in-out;
        }
        .rainbow-btn:hover {
            background-position: right center;
        }

        #info-btn, #resume-quiz-btn {
            background-size: 200% auto;
            transition: background-position 0.4s ease-in-out;
        }
        #info-btn:hover, #resume-quiz-btn:hover {
            background-position: right center;
        }

        #confetti-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 100;
        }
        .glass-effect {
             background-color: rgba(255, 255, 255, 0.6);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
        }
        #break-canvas {
            touch-action: none;
            cursor: pointer;
        }
        #study-guide-modal-content {
            max-height: 80vh;
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center p-4">

    <div id="floating-title" class="w-full max-w-4xl mx-auto bg-white/90 backdrop-blur-sm rounded-2xl shadow-lg p-3 text-center mb-4 hidden">
        <h1 id="unit-title-text" class="text-2xl font-bold text-purple-600"></h1>
    </div>

    <div id="game-container" class="w-full max-w-4xl mx-auto rounded-2xl shadow-lg p-6 md:p-8 relative glass-effect">
        <canvas id="confetti-canvas"></canvas>
        
        <!-- Main Menu Screen -->
        <div id="main-menu-screen" class="text-center">
            <h1 class="font-title text-4xl md:text-5xl font-bold text-purple-600 mb-2">Anleigh's Social Studies Review</h1>
            <p class="text-gray-600 mb-8">Choose a unit below to play a game!</p>
            <div id="unit-selection-container" class="space-y-4 glass-effect rounded-2xl p-6">
                 <div class="grid grid-cols-3 sm:grid-cols-5 gap-4 px-4 pb-2 border-b-2 font-bold text-gray-600">
                    <div class="text-left col-span-3">Unit</div>
                    <div class="text-center hidden sm:block">Study Guide</div>
                    <div class="text-center hidden sm:block">Play Game</div>
                </div>
                <div id="unit-selection" class="space-y-2">
                    <!-- Unit selection buttons will be populated here -->
                </div>
            </div>
             <div class="mt-8 pt-4 border-t-2">
                <button id="final-exam-btn" class="w-full text-white font-bold py-3 px-6 rounded-lg text-lg transform hover:scale-105 rainbow-btn">
                    Final Exam (All Units)
                </button>
                <p id="final-exam-high-score" class="text-sm text-gray-500 mt-2 hidden">High Score: <span></span></p>
            </div>
        </div>


        <!-- Quiz Screen -->
        <div id="quiz-screen" class="hidden">
            <div class="flex justify-between items-center mb-4">
                 <div class="flex items-center gap-4">
                    <button id="back-to-menu-btn-quiz" title="Back to Main Menu" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold p-2 rounded-full transition duration-300">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                        </svg>
                    </button>
                    <div>
                        <p id="question-counter-display" class="text-gray-500 text-sm">Question <span id="question-number"></span> of <span id="total-questions"></span></p>
                        <p class="text-purple-600 font-semibold">Score: <span id="score">0</span></p>
                    </div>
                </div>
                 <button id="info-btn" class="bg-gradient-to-r from-pink-700 via-purple-700 to-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">
                    Toggle Study Guide
                </button>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg mb-6">
                <p id="question-reference" class="text-xs text-gray-500 mb-2 font-medium uppercase"></p>
                <div id="question-container" class="flex items-center justify-between gap-2">
                    <h2 id="question-text" class="text-xl md:text-2xl font-semibold text-gray-800 flex-grow"></h2>
                </div>
            </div>
            <div id="answer-buttons" class="grid grid-cols-1 gap-4"></div>
            <div id="feedback" class="mt-6 text-center font-bold text-lg"></div>

            <button id="next-btn" class="w-full mt-6 text-white font-bold py-3 px-6 rounded-lg hidden rainbow-btn">
                Next Question
            </button>
            
            <div id="study-guide-content" class="pt-6 border-t-2"></div>
        </div>
        
        <!-- Brain Break Screen -->
        <div id="brain-break-screen" class="hidden text-center">
            <h2 class="text-3xl font-bold text-pink-500 mb-2">Brain Break!</h2>
            <p id="break-instructions" class="text-gray-600 mb-4">Relax for a moment.</p>
            <canvas id="break-canvas" class="bg-black rounded-lg shadow-inner border-2 border-gray-200 mx-auto" width="500" height="300"></canvas>
            <p id="timer-display" class="text-lg text-gray-700 my-4 font-semibold"></p>
            <button id="resume-quiz-btn" class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg text-lg">
                Continue Quiz!
            </button>
        </div>


        <!-- End Screen -->
        <div id="end-screen" class="hidden text-center">
             <h1 class="text-3xl md:text-4xl font-bold text-purple-600 mb-4">Quiz Complete!</h1>
             <p class="text-gray-700 text-xl mb-2">Your Final Score is:</p>
             <p id="final-score" class="text-6xl font-extrabold text-green-500 mb-8"></p>
             <p id="end-message" class="text-lg text-gray-600 mt-4 mb-8"></p>
             <button id="back-to-menu-btn" class="w-full bg-purple-500 hover:bg-purple-600 text-white font-bold py-3 px-6 rounded-lg text-lg transition duration-300 transform hover:scale-105">
                Back to Main Menu
             </button>
        </div>
    </div>
    
    <!-- Study Guide Modal -->
    <div id="study-guide-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-white rounded-2xl shadow-2xl w-full max-w-4xl p-6 relative">
             <h2 id="modal-title" class="text-3xl font-bold text-purple-700 text-center mb-4">Study Guide</h2>
             <div id="study-guide-modal-content" class="overflow-y-auto">
                <!-- Study guide content will be injected here -->
             </div>
             <button id="close-modal-btn" class="absolute top-4 right-4 bg-red-500 hover:bg-red-600 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold text-lg">
                &times;
            </button>
        </div>
    </div>

    <footer class="fixed bottom-4 right-4 flex items-center gap-4 text-xs text-gray-600">
        <button id="sound-toggle" class="bg-white hover:bg-gray-100 border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
            <svg id="sound-on-icon" class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"></path></svg>
            <svg id="sound-off-icon" class="w-5 h-5 text-gray-700 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15zM17 14l2-2m0 0l2-2m-2 2l-2 2m2-2l2 2"></path></svg>
        </button>
        <span>MF Build: 250923.21</span>
    </footer>

    <!-- Audio Elements -->
    <audio id="correct-sound"></audio>
    <audio id="incorrect-sound"></audio>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const gameData = {
                unit1: {
                    title: "Unit 1: Georgia's Beginnings",
                    questions: [
                        { question: "In which two hemispheres is Georgia located?", reference: "AKS 30.a: Georgia's Location", answers: [{ text: "Northern and Eastern", correct: false }, { text: "Northern and Western", correct: true }, { text: "Southern and Western", correct: false }], highlightTerm: "Northern and Western" },
                        { question: "Which geographic region is the smallest and located in the 'TAG corner' of Georgia?", reference: "AKS 30.b: Geographic Regions", answers: [{ text: "Blue Ridge", correct: false }, { text: "Appalachian Plateau", correct: true }, { text: "Piedmont", correct: false }], highlightTerm: "Appalachian Plateau" },
                        { question: "Dalton, the 'carpet capital of the world', is located in which region?", reference: "AKS 30.b: Geographic Regions", answers: [{ text: "Coastal Plain", correct: false }, { text: "Ridge and Valley", correct: true }, { text: "Blue Ridge", correct: false }], highlightTerm: "Ridge and Valley" },
                        { question: "Which region contains Georgia's highest peak, Brasstown Bald, and receives the most rainfall?", reference: "AKS 30.b: Geographic Regions", answers: [{ text: "Piedmont", correct: false }, { text: "Blue Ridge", correct: true }, { text: "Appalachian Plateau", correct: false }], highlightTerm: "Blue Ridge" },
                        { question: "What does the word 'Piedmont' mean, which describes its gently rolling hills?", reference: "AKS 30.b: Geographic Regions", answers: [{ text: "'Red Clay'", correct: false }, { text: "'Foot of the hills'", correct: true }, { text: "'High mountains'", correct: false }], highlightTerm: "Piedmont" },
                        { question: "Which region is the most populated and contains Atlanta?", reference: "AKS 30.b: Geographic Regions", answers: [{ text: "Coastal Plain", correct: false }, { text: "Piedmont", correct: true }, { text: "Blue Ridge", correct: false }], highlightTerm: "Piedmont" },
                        { question: "Which region is the largest by land area and is the agricultural heartland of the state?", reference: "AKS 30.b: Geographic Regions", answers: [{ text: "Piedmont", correct: false }, { text: "Coastal Plain", correct: true }, { text: "Ridge and Valley", correct: false }], highlightTerm: "Coastal Plain" },
                        { question: "What natural boundary separates the Piedmont and Coastal Plain regions?", reference: "AKS 30.c: Physical Features", answers: [{ text: "Savannah River", correct: false }, { text: "The Fall Line", correct: true }, { text: "Appalachian Mountains", correct: false }], highlightTerm: "Fall Line" },
                        { question: "What is the primary function of the barrier islands?", reference: "AKS 30.c: Physical Features", answers: [{ text: "To provide agricultural land", correct: false }, { text: "To protect the mainland from hurricane erosion", correct: true }, { text: "To serve as a source of freshwater", correct: false }], highlightTerm: "Barrier Islands" },
                        { question: "Which river forms the border between Georgia and Alabama?", reference: "AKS 30.c: Physical Features", answers: [{ text: "Savannah River", correct: false }, { text: "Chattahoochee River", correct: true }, { text: "Ocmulgee River", correct: false }], highlightTerm: "Chattahoochee River" },
                        { question: "Which river forms the border between Georgia and South Carolina?", reference: "AKS 30.c: Physical Features", answers: [{ text: "St. Marys River", correct: false }, { text: "Savannah River", correct: true }, { text: "Chattahoochee River", correct: false }], highlightTerm: "Savannah River" },
                        { question: "Why did many of Georgia's early cities, like Augusta and Macon, develop along the Fall Line?", reference: "AKS 30.d: Importance of Water", answers: [{ text: "The area had the best climate for farming", correct: false }, { text: "Rivers provided hydropower for mills and waterfalls blocked ships", correct: true }, { text: "It was the only area free from American Indian tribes", correct: false }], highlightTerm: "Fall Line" },
                        { question: "What was the dominant crop for the Mississippian Indians?", reference: "AKS 31.a: Mississippian Indians", answers: [{ text: "Cotton", correct: false }, { text: "Maize (corn)", correct: true }, { text: "Peanuts", correct: false }], highlightTerm: "Maize (corn)" },
                        { question: "What kind of shelters did the Mississippian Indians use?", reference: "AKS 31.a: Mississippian Indians", answers: [{ text: "Log cabins", correct: false }, { text: "Wattle and daub shelters", correct: true }, { text: "Teepees", correct: false }], highlightTerm: "wattle & daub" },
                        { question: "What were the '3 G's' that motivated Spanish exploration?", reference: "AKS 31.b: European Motives", answers: [{ text: "Grains, Guns, and Galleons", correct: false }, { text: "God, Gold, and Glory", correct: true }, { text: "Geography, Government, and Growth", correct: false }], highlightTerm: "God, Gold, and Glory" },
                        { question: "What was the primary reason for British interest in settling North America?", reference: "AKS 31.b: European Motives", answers: [{ text: "To find a new route to Asia", correct: false }, { text: "To support the economic policy of mercantilism", correct: true }, { text: "To learn from the American Indians", correct: false }], highlightTerm: "mercantilism" },
                        { question: "What was the most devastating impact of European contact, especially from Hernando de Soto's exploration, on the American Indians?", reference: "AKS 31.c: Spanish Impact", answers: [{ text: "They lost their land to new forts", correct: false }, { text: "Diseases like smallpox wiped out much of their population", correct: true }, { text: "They were forced to learn Spanish", correct: false }], highlightTerm: "diseases such as smallpox" },
                        { question: "What was the main purpose of the Spanish missions established on Georgia's barrier islands?", reference: "AKS 31.c: Spanish Impact", answers: [{ text: "To trade for furs and gold", correct: false }, { text: "To convert American Indians to Christianity (Catholicism)", correct: true }, { text: "To create military bases against the British", correct: false }], highlightTerm: "Spanish missions" },
                        { question: "Which of these is NOT one of Georgia's four main transportation systems?", reference: "AKS 49: Transportation Systems", answers: [{ text: "Deepwater Ports", correct: false }, { text: "Subway Systems", correct: true }, { text: "Interstate Highway System", correct: false }], highlightTerm: "four transportation systems" },
                        { question: "Which Georgia airport is known as the busiest in the world?", reference: "AKS 49: Transportation Systems", answers: [{ text: "DeKalb-Peachtree Airport", correct: false }, { text: "Hartsfield-Jackson International Airport", correct: true }, { text: "Savannah/Hilton Head International", correct: false }], highlightTerm: "Hartsfield-Jackson International Airport" },
                    ],
                    studyGuideHTML: `
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-blue-50 p-4 rounded-lg space-y-3 text-sm">
                                <h3 class="font-bold text-blue-800 text-lg">AKS 30.a: Georgia's Location</h3>
                                <p>Georgia is in the <strong>Northern and Western</strong> hemispheres, on the continent of <strong>North America</strong>, in the nation of the <strong>United States of America</strong>, in the <strong>Southeast</strong> region.</p>
                                <h3 class="font-bold text-blue-800 text-lg mt-4">AKS 30.b: Geographic Regions</h3>
                                <ul class="list-disc list-inside ml-4">
                                    <li><strong>Appalachian Plateau:</strong> Smallest region (TAG corner). Economy based on tourism and forestry.</li>
                                    <li><strong>Ridge and Valley:</strong> Known for long ridges and fertile valleys. Economy based on textiles and carpet (Dalton).</li>
                                    <li><strong>Blue Ridge:</strong> Contains the highest peaks (Brasstown Bald) and gets the most rain. Source of major rivers.</li>
                                    <li><strong>Piedmont:</strong> Most populated region, with rolling hills and red clay. Means "foot of the hills". Diverse economy.</li>
                                    <li><strong>Coastal Plain:</strong> Largest region (60% of state). Agricultural heartland.</li>
                                </ul>
                            </div>
                            <div class="bg-green-50 p-4 rounded-lg space-y-3 text-sm">
                                <h3 class="font-bold text-green-800 text-lg">AKS 30.c: Physical Features</h3>
                                 <ul class="list-disc list-inside ml-4">
                                    <li><strong>Fall Line:</strong> Separates Piedmont and Coastal Plain.</li>
                                    <li><strong>Okefenokee Swamp:</strong> Largest freshwater swamp in North America.</li>
                                    <li><strong>Chattahoochee River:</strong> Forms Georgia's western border with Alabama.</li>
                                    <li><strong>Savannah River:</strong> Forms Georgia's eastern border with South Carolina.</li>
                                    <li><strong>Barrier Islands:</strong> Protect the mainland from hurricanes and erosion.</li>
                                </ul>
                                <h3 class="font-bold text-green-800 text-lg mt-4">AKS 30.d: Importance of Water</h3>
                                <p>Rivers (like at the <strong>Fall Line</strong>) and ports are vital for transportation, drinking water, power, and recreation, shaping historical settlement and economic growth.</p>
                            </div>
                            <div class="bg-yellow-50 p-4 rounded-lg space-y-3 text-sm">
                                <h3 class="font-bold text-yellow-800 text-lg">AKS 31: Early Inhabitants & Exploration</h3>
                                <p><strong>Mississippian Indians (AKS 31.a):</strong> Lived in large villages with mounds. They were farmers, with <strong>Maize (corn)</strong> as their main crop. Used bow & arrow and lived in <strong>wattle & daub</strong> shelters.</p>
                                <p><strong>European Motives (AKS 31.b):</strong> Spanish sought <strong>God, Gold, and Glory</strong>. British sought economic gain through <strong>mercantilism</strong>.</p>
                                <p><strong>Spanish Impact (AKS 31.c):</strong> Hernando de Soto's exploration led to the death of many natives from <strong>diseases such as smallpox</strong>. <strong>Spanish missions</strong> were built on the barrier islands to convert natives to Christianity.</p>
                            </div>
                             <div class="bg-red-50 p-4 rounded-lg space-y-3 text-sm">
                                <h3 class="font-bold text-red-800 text-lg">AKS 49: Transportation Systems</h3>
                                <p><strong>Four Systems:</strong> Interstate Highway System, <strong>Hartsfield-Jackson International Airport</strong>, Deepwater Ports (Savannah, Brunswick), and Railroads.</p>
                                <p><strong>Economic Impact:</strong> These systems work together to move goods and people, providing jobs and connecting Georgia to the global economy.</p>
                            </div>
                        </div>`
                },
                unit2: {
                    title: "Unit 2: Georgia's Government",
                    questions: [
                        { question: "What is the primary role of the Judicial Branch?", reference: "AKS 43.b: Checks & Balances", answers: [{ text: "To make laws", correct: false }, { text: "To enforce laws", correct: false }, { text: "To interpret laws and declare them unconstitutional", correct: true }], highlightTerm: "Judicial Branch" },
                        { question: "What can the Legislative Branch do if the Governor vetoes a bill?", reference: "AKS 43.b: Checks & Balances", answers: [{ text: "Nothing, the bill is dead", correct: false }, { text: "Override the veto with a 2/3 vote", correct: true }, { text: "Ask the citizens to vote", correct: false }], highlightTerm: "override the Governor’s veto" },
                        { question: "Paying taxes, obeying laws, and serving on juries are examples of citizen...", reference: "AKS 43.c: Citizen Responsibilities", answers: [{ text: "Rights", correct: false }, { text: "Responsibilities", correct: true }, { text: "Privileges", correct: false }], highlightTerm: "Responsibilities of citizens" },
                        { question: "What are the three principles in Georgia's Pledge of Allegiance?", reference: "AKS 43.e: State Pledge", answers: [{ text: "Liberty, Equality, Fraternity", correct: false }, { text: "Life, Liberty, Property", correct: false }, { text: "Wisdom, Justice, and Moderation", correct: true }], highlightTerm: "Wisdom, Justice, and Moderation" },
                        { question: "How old must you be to vote in Georgia?", reference: "AKS 43.d: Voting Qualifications", answers: [{ text: "16", correct: false }, { text: "18", correct: true }, { text: "21", correct: false }], highlightTerm: "18 years of age" },
                        { question: "What is the name of Georgia's legislative branch?", reference: "AKS 44: Legislative Branch", answers: [{ text: "Congress", correct: false }, { text: "The General Assembly", correct: true }, { text: "Parliament", correct: false }], highlightTerm: "General Assembly" },
                        { question: "How old must a person be to become a State Senator in Georgia?", reference: "AKS 44.a: Qualifications", answers: [{ text: "21", correct: false }, { text: "25", correct: true }, { text: "30", correct: false }], highlightTerm: "at least 25 years old" },
                        { question: "How long is the term for a member of the General Assembly?", reference: "AKS 44.a: Qualifications", answers: [{ text: "2-year term", correct: true }, { text: "4-year term", correct: false }, { text: "6-year term", correct: false }], highlightTerm: "Serve 2-year term" },
                        { question: "Who presides over the Georgia State Senate?", reference: "AKS 44.b: General Assembly Organization", answers: [{ text: "The Governor", correct: false }, { text: "The Speaker of the House", correct: false }, { text: "The Lieutenant Governor", correct: true }], highlightTerm: "Lieutenant Governor" },
                        { question: "Most of the work done in the General Assembly takes place in...", reference: "AKS 44.b: General Assembly Organization", answers: [{ text: "The Governor's office", correct: false }, { text: "Committees", correct: true }, { text: "Public forums", correct: false }], highlightTerm: "committees" },
                        { question: "What percentage of votes is needed for a bill to pass in the General Assembly?", reference: "AKS 44.c: Lawmaking Process", answers: [{ text: "A 2/3 majority", correct: false }, { text: "A simple majority (51%)", correct: true }, { text: "A 3/4 majority", correct: false }], highlightTerm: "51% majority" },
                        { question: "What happens if the Governor does not sign or veto a bill?", reference: "AKS 44.c: Lawmaking Process", answers: [{ text: "It becomes law automatically", correct: true }, { text: "It is sent back to the committee", correct: false }, { text: "The bill dies", correct: false }], highlightTerm: "It becomes law" },
                        { question: "What is the main purpose of Georgia's Executive Branch?", reference: "AKS 45: Executive Branch", answers: [{ text: "To make laws", correct: false }, { text: "To interpret laws", correct: false }, { text: "To enforce laws", correct: true }], highlightTerm: "Enforcing state laws" },
                        { question: "What are the qualifications to be Governor of Georgia?", reference: "AKS 45.a: Governor Qualifications", answers: [{ text: "25 years old, US citizen for 10 years", correct: false }, { text: "30 years of age, GA resident for 6 years, US Citizen for 15 years", correct: true }, { text: "35 years old, born in Georgia", correct: false }], highlightTerm: "30 years of age" },
                        { question: "Which branch of government is the largest in the state?", reference: "AKS 45.b: State Agencies", answers: [{ text: "Legislative Branch", correct: false }, { text: "Judicial Branch", correct: false }, { text: "Executive Branch", correct: true }], highlightTerm: "executive branch is the largest" }
                    ],
                    studyGuideHTML: `
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-blue-50 p-4 rounded-lg space-y-3 text-sm">
                                <h3 class="font-bold text-blue-800 text-lg">AKS 43: Government Basics</h3>
                                <p><strong>Checks & Balances (43.b):</strong> Each branch can limit the others. (e.g., Governor can veto, but legislature can <strong>override</strong>. The Judicial Branch can declare laws unconstitutional).</p>
                                <p><strong>Pledge Principles (43.e):</strong> Wisdom, Justice, and Moderation.</p>
                                <p><strong>Citizen Responsibilities (43.c):</strong> Paying taxes, serving on juries, obeying laws, voting.</p>
                                <p><strong>Voting Qualifications (43.d):</strong> Must be a U.S. citizen, a resident of GA, and <strong>18 years of age</strong>.</p>
                            </div>
                            <div class="bg-yellow-50 p-4 rounded-lg space-y-3 text-sm">
                                <h3 class="font-bold text-yellow-800 text-lg">AKS 44: Legislative Branch</h3>
                                <p><strong>General Assembly:</strong> Makes laws. Made of House of Reps & Senate. Meets for 40 work days. Bills need a <strong>51% majority</strong> to pass. Can override a veto with a 2/3 vote.</p>
                                <p><strong>Qualifications (44.a):</strong> Reps must be 21; Senators must be <strong>at least 25 years old</strong>. Both serve a <strong>2-year term</strong>.</p>
                                <p><strong>Organization (44.b):</strong> <strong>Lieutenant Governor</strong> presides over Senate. Most work is done in <strong>committees</strong>.</p>
                                <p><strong>Lawmaking (44.c):</strong> If the Governor doesn't sign or veto, a bill <strong>becomes law</strong> automatically.</p>
                            </div>
                            <div class="bg-green-50 p-4 rounded-lg space-y-3 text-sm md:col-span-2">
                                <h3 class="font-bold text-green-800 text-lg">AKS 45: Executive Branch</h3>
                                <p><strong>Role:</strong> <strong>Enforcing state laws</strong>. It is the largest branch. Headed by the Governor.</p>
                                <p><strong>Governor Qualifications (45.a):</strong> Must be <strong>30 years of age</strong>, a GA resident for 6 years, and a US Citizen for 15 years.</p>
                                <p><strong>State Agencies (45.b):</strong> The <strong>executive branch is the largest</strong> in the state because it includes numerous agencies that administer programs and enforce laws.</p>
                            </div>
                        </div>`
                },
                unit3: {
                    title: "Unit 3: Judicial & Local Government",
                    questions: [
                        { question: "What is the highest court in Georgia's judicial branch?", reference: "AKS 46: Judicial Branch", answers: [{ text: "Superior Court", correct: false }, { text: "Georgia's Supreme Court", correct: true }, { text: "Court of Appeals", correct: false }], highlightTerm: "Georgia's Supreme Court" },
                        { question: "What is the main role of the Georgia Supreme Court regarding laws and actions?", reference: "AKS 46: Judicial Branch", answers: [{ text: "To create new laws", correct: false }, { text: "To determine if they are constitutional", correct: true }, { text: "To enforce the laws", correct: false }], highlightTerm: "constitutional" },
                        { question: "How are Georgia's Supreme Court justices selected?", reference: "AKS 46: Judicial Branch", answers: [{ text: "They are appointed by the Governor", correct: false }, { text: "They are elected in a state-wide election", correct: true }, { text: "They are chosen by the General Assembly", correct: false }], highlightTerm: "elected in a state-wide election" },
                        { question: "Disputes between people, such as lawsuits, are handled by which type of law?", reference: "AKS 46: Judicial Branch", answers: [{ text: "Criminal Law", correct: false }, { text: "Civil Law", correct: true }, { text: "Constitutional Law", correct: false }], highlightTerm: "Civil" },
                        { question: "The step in the adult criminal justice process where the accused is formally charged is called...", reference: "AKS 46: Judicial Branch", answers: [{ text: "Booking", correct: false }, { text: "Trial", correct: false }, { text: "Charging (Indicting)", correct: true }], highlightTerm: "Charging (formal word is Indicting)" },
                        { question: "In Georgia, a person under what age is considered a juvenile?", reference: "AKS 47: Juvenile Justice", answers: [{ text: "18", correct: false }, { text: "17", correct: true }, { text: "16", correct: false }], highlightTerm: "under 17 years old" },
                        { question: "What is the main goal of the juvenile court system?", reference: "AKS 47: Juvenile Justice", answers: [{ text: "To punish youth offenders", correct: false }, { text: "To protect and rehabilitate", correct: true }, { text: "To set an example for other teens", correct: false }], highlightTerm: "protect and rehabilitate" },
                        { question: "An act that would NOT be a crime if committed by an adult, like skipping school, is called a...", reference: "AKS 47: Juvenile Justice", answers: [{ text: "Delinquent act", correct: false }, { text: "Unruly act (Status Offense)", correct: true }, { text: "Misdemeanor", correct: false }], highlightTerm: "Unruly (Status Offense)" },
                        { question: "What is the first step in the juvenile justice process after a juvenile is taken into custody?", reference: "AKS 47: Juvenile Justice", answers: [{ text: "Adjudicatory Hearing", correct: false }, { text: "Intake", correct: true }, { text: "Sentencing", correct: false }], highlightTerm: "Intake" },
                        { question: "Which government is established by a Municipal Charter to provide services like police and trash pickup?", reference: "AKS 48: Local Government", answers: [{ text: "County", correct: false }, { text: "City (Municipality)", correct: true }, { text: "Special-Purpose", correct: false }], highlightTerm: "City (Municipality)" },
                        { question: "Which government is mandated by the state constitution to carry out state programs?", reference: "AKS 48: Local Government", answers: [{ text: "City", correct: false }, { text: "County", correct: true }, { text: "Special-Purpose", correct: false }], highlightTerm: "County" },
                        { question: "A school district or MARTA is an example of what kind of government?", reference: "AKS 48: Local Government", answers: [{ text: "City", correct: false }, { text: "County", correct: false }, { text: "Special-Purpose", correct: true }], highlightTerm: "Special-Purpose" },
                        { question: "What type of tax is the main source of revenue for local governments, based on the value of property?", reference: "AKS 48: Local Government", answers: [{ text: "Sales Tax", correct: false }, { text: "Ad Valorem (Property) Tax", correct: true }, { text: "Income Tax", correct: false }], highlightTerm: "Ad Valorem (Property) Taxes" },
                    ],
                    studyGuideHTML: `
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div class="bg-blue-50 p-4 rounded-lg space-y-3 text-sm">
                                <h3 class="font-bold text-blue-800 text-lg mb-2 border-b-2 border-blue-200 pb-2">AKS 46: Judicial Branch</h3>
                                <p><strong class="font-semibold text-blue-700">Highest Court:</strong> Georgia's Supreme Court</p>
                                <p><strong class="font-semibold text-blue-700">Supreme Court's Role:</strong> To determine if actions are constitutional and interpret laws.</p>
                                <p><strong class="font-semibold text-blue-700">Justice Elections:</strong> Justices are elected in a state-wide election for a 6-year term.</p>
                                <p><strong class="font-semibold text-blue-700">Main Roles of Courts:</strong> 1) Administer justice, 2) Prosecute criminals, 3) Resolve civil disputes impartially.</p>
                                <div><strong class="font-semibold text-blue-700">Types of Law:</strong><ul class="list-disc list-inside mt-1 pl-2"><li><strong>Civil:</strong> Disputes between people (e.g., lawsuits).</li><li><strong>Criminal:</strong> Deals with violations of the law (felonies and misdemeanors).</li></ul></div>
                                <div><strong class="font-semibold text-blue-700">Adult Criminal Justice Steps:</strong><ol class="list-decimal list-inside mt-1 pl-2"><li>Arrest</li><li>Booking</li><li>Charging (formal word is Indicting)</li><li>Trial</li><li>Sentencing</li><li>Appeal (if a fair trial is questioned)</li></ol></div>
                            </div>
                            <div class="bg-green-50 p-4 rounded-lg space-y-3 text-sm">
                                <h3 class="font-bold text-green-800 text-lg mb-2 border-b-2 border-green-200 pb-2">AKS 47: Juvenile Justice</h3>
                                <p><strong class="font-semibold text-green-700">Who is a Juvenile?</strong> Anyone under 17 years old.</p>
                                <p><strong class="font-semibold text-green-700">Goal of Court:</strong> To protect and rehabilitate.</p>
                                <div><strong class="font-semibold text-green-700">Types of Acts:</strong><ul class="list-disc list-inside mt-1 pl-2"><li><strong>Delinquent:</strong> A crime if done by an adult (e.g., theft).</li><li><strong>Unruly (Status Offense):</strong> Only wrong for a juvenile (e.g., skipping school).</li></ul></div>
                                <p><strong class="font-semibold text-green-700">No Juries:</strong> The judge makes the decisions.</p>
                                <div><strong class="font-semibold text-green-700">Juvenile Justice Steps:</strong><ol class="list-decimal list-inside mt-1 pl-2"><li><strong>Intake:</strong> Taken into custody, parents notified.</li><li><strong>Released or Detained:</strong> Released to parents or held (detained) at a YDC if there is enough evidence.</li><li><strong>Informal Adjustment:</strong> Optional for first-timers who admit guilt; supervised for 90 days.</li><li><strong>Adjudicatory Hearing:</strong> Judge determines guilt or innocence.</li><li><strong>Dispositional Hearing:</strong> Judge hears witnesses and determines consequences.</li><li><strong>Sentencing:</strong> Judge rules on consequences (e.g., boot camp, probation, fines).</li><li><strong>Appeal:</strong> Can appeal if there is evidence of innocence.</li></ol></div>
                            </div>
                            <div class="bg-yellow-50 p-4 rounded-lg space-y-3 text-sm md:col-span-2">
                                <h3 class="font-bold text-yellow-800 text-lg mb-2 border-b-2 border-yellow-200 pb-2">AKS 48: Local Government</h3>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div><strong class="font-semibold text-yellow-700">Main Types:</strong><ul class="list-disc list-inside mt-1 pl-2"><li><strong>City (Municipality):</strong> Provides services like police, trash pickup. Established by a Municipal Charter.</li><li><strong>County:</strong> Carries out state programs (e.g., courts). Mandated by the GA Constitution.</li><li><strong>Special-Purpose:</strong> Has one specific job (e.g., school district, MARTA). Created to benefit citizens.</li></ul></div>
                                    <div><strong class="font-semibold text-yellow-700">How They're Funded:</strong><ul class="list-disc list-inside mt-1 pl-2"><li>Sales Taxes (like SPLOST)</li><li>Ad Valorem (Property) Taxes</li><li>User Fees and Fines</li></ul></div>
                                </div>
                            </div>
                        </div>`
                }
            };
            
            const mainMenuScreen = document.getElementById('main-menu-screen');
            const quizScreen = document.getElementById('quiz-screen');
            const endScreen = document.getElementById('end-screen');
            const brainBreakScreen = document.getElementById('brain-break-screen');
            const breakCanvas = document.getElementById('break-canvas');
            const breakInstructions = document.getElementById('break-instructions');
            const timerDisplay = document.getElementById('timer-display');
            const resumeQuizBtn = document.getElementById('resume-quiz-btn');
            const studyGuideContent = document.getElementById('study-guide-content');
            const nextBtn = document.getElementById('next-btn');
            const infoBtn = document.getElementById('info-btn');
            const soundToggleBtn = document.getElementById('sound-toggle');
            const soundOnIcon = document.getElementById('sound-on-icon');
            const soundOffIcon = document.getElementById('sound-off-icon');
            const questionCounterDisplay = document.getElementById('question-counter-display');
            const questionNumberEl = document.getElementById('question-number');
            const totalQuestionsEl = document.getElementById('total-questions');
            const scoreEl = document.getElementById('score');
            const questionContainer = document.getElementById('question-container');
            const questionReferenceEl = document.getElementById('question-reference');
            const answerButtonsEl = document.getElementById('answer-buttons');
            const feedbackEl = document.getElementById('feedback');
            const finalScoreEl = document.getElementById('final-score');
            const endMessageEl = document.getElementById('end-message');
            const confettiCanvas = document.getElementById('confetti-canvas');
            const confettiCtx = confettiCanvas.getContext('2d');
            const correctSound = document.getElementById('correct-sound');
            const incorrectSound = document.getElementById('incorrect-sound');
            const unitSelectionContainer = document.getElementById('unit-selection');
            const finalExamBtn = document.getElementById('final-exam-btn');
            const finalExamHighScore = document.getElementById('final-exam-high-score');
            const floatingTitle = document.getElementById('floating-title');
            const unitTitleText = document.getElementById('unit-title-text');
            const studyGuideModal = document.getElementById('study-guide-modal');
            const modalTitle = document.getElementById('modal-title');
            const studyGuideModalContent = document.getElementById('study-guide-modal-content');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const backToMenuBtn = document.getElementById('back-to-menu-btn');
            const backToMenuBtnQuiz = document.getElementById('back-to-menu-btn-quiz');
            
            let shuffledQuestions, currentQuestionIndex;
            let score = 0;
            let questionsSinceBreak = 0;
            let questionsAnsweredFirstTry = 0;
            let brainBreakCounter = 0;
            let soundsEnabled = true;
            let confettiPieces = [];
            let advanceTimeout = null;
            let breakTimerInterval = null;
            let animationFrameId;
            const correctEmojis = ['🎉', '🥳', '🤩', '👍', '💯', '✨', '🚀', '⭐', '🏆'];
            let currentBreakListeners = [];
            let currentUnitId = null;
            let totalOriginalQuestions = 0;
            
            // --- ALL OTHER FUNCTIONS GO HERE ---
            
             // --- Cookie Helper Functions ---
            function setCookie(name, value, days) { let expires = ""; if (days) { const date = new Date(); date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); expires = "; expires=" + date.toUTCString(); } document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax"; }
            function getCookie(name) { const nameEQ = name + "="; const ca = document.cookie.split(';'); for (let i = 0; i < ca.length; i++) { let c = ca[i]; while (c.charAt(0) == ' ') c = c.substring(1, c.length); if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length); } return null; }

             function populateMainMenu() {
                unitSelectionContainer.innerHTML = '';
                for (const unitId in gameData) {
                    const unit = gameData[unitId];
                    const unitContainer = document.createElement('div');
                    unitContainer.classList.add('p-4', 'rounded-lg', 'bg-white/80', 'shadow', 'flex', 'items-center', 'justify-between', 'gap-4');
                    const titleAndScore = document.createElement('div');
                    titleAndScore.classList.add('text-left', 'flex-grow');
                    const title = document.createElement('h2');
                    title.textContent = unit.title;
                    title.classList.add('text-xl', 'font-bold', 'text-gray-800');
                    titleAndScore.appendChild(title);
                    const highScoreDisplay = document.createElement('p');
                    const highScore = getCookie(`highScore_${unitId}`) || 0;
                    highScoreDisplay.innerHTML = `High Score: <span class="font-bold">${highScore}%</span>`;
                    highScoreDisplay.classList.add('text-sm', 'text-gray-500');
                    titleAndScore.appendChild(highScoreDisplay);
                    unitContainer.appendChild(titleAndScore);
                    const buttonGroup = document.createElement('div');
                    buttonGroup.classList.add('flex', 'items-center', 'gap-2', 'flex-shrink-0');
                    const guideButton = document.createElement('button');
                    guideButton.title = `View Study Guide for ${unit.title}`;
                    guideButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2M9 5a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2M9 5a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" /></svg>`;
                    guideButton.classList.add('p-2', 'rounded-full', 'bg-blue-100', 'text-blue-600', 'hover:bg-blue-200', 'transition-all', 'duration-200', 'transform', 'hover:scale-110');
                    guideButton.onclick = () => showStudyGuideModal(unitId);
                    buttonGroup.appendChild(guideButton);
                    const startButton = document.createElement('button');
                    startButton.title = `Start Quiz for ${unit.title}`;
                    startButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" /><path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>`;
                    startButton.classList.add('p-2', 'rounded-full', 'bg-green-100', 'text-green-600', 'hover:bg-green-200', 'transition-all', 'duration-200', 'transform', 'hover:scale-110');
                    startButton.onclick = () => startGame(unitId);
                    buttonGroup.appendChild(startButton);
                    unitContainer.appendChild(buttonGroup);
                    unitSelectionContainer.appendChild(unitContainer);
                }
                const finalExamScore = getCookie('highScore_final_exam');
                if (finalExamScore) {
                    finalExamHighScore.classList.remove('hidden');
                    finalExamHighScore.querySelector('span').textContent = `${finalExamScore}%`;
                }
            }

            function showStudyGuideModal(unitId) {
                const unit = gameData[unitId];
                modalTitle.textContent = unit.title;
                studyGuideModalContent.innerHTML = unit.studyGuideHTML;
                studyGuideModal.classList.remove('hidden');
            }
            
            function showMainMenu() {
                mainMenuScreen.classList.remove('hidden');
                quizScreen.classList.add('hidden');
                endScreen.classList.add('hidden');
                floatingTitle.classList.add('hidden');
                if(animationFrameId) cancelAnimationFrame(animationFrameId);
                if(breakTimerInterval) clearInterval(breakTimerInterval);
            }
            
            function startGame(unitId) {
                currentUnitId = unitId;
                let questions;
                let studyGuideHTML;

                if (unitId === 'final_exam') {
                    questions = Object.values(gameData).flatMap(unit => unit.questions);
                    studyGuideHTML = Object.values(gameData).map(unit => `<div><h2 class="text-2xl font-bold mt-4">${unit.title}</h2>${unit.studyGuideHTML}</div>`).join('');
                    unitTitleText.textContent = "Final Exam (All Units)";
                } else {
                    questions = gameData[unitId].questions;
                    studyGuideHTML = gameData[unitId].studyGuideHTML;
                    unitTitleText.textContent = gameData[unitId].title;
                }

                mainMenuScreen.classList.add('hidden');
                quizScreen.classList.remove('hidden');
                floatingTitle.classList.remove('hidden');

                document.getElementById('study-guide-content').innerHTML = studyGuideHTML;

                shuffledQuestions = JSON.parse(JSON.stringify(questions)).sort(() => Math.random() - 0.5);
                totalOriginalQuestions = shuffledQuestions.length;
                currentQuestionIndex = 0;
                score = 0;
                questionsSinceBreak = 0;
                questionsAnsweredFirstTry = 0;
                brainBreakCounter = 0;
                scoreEl.innerText = score;
                totalQuestionsEl.innerText = totalOriginalQuestions;
                setNextQuestion();
            }

            function initialize() {
                populateMainMenu();
                finalExamBtn.addEventListener('click', () => startGame('final_exam'));
                backToMenuBtn.addEventListener('click', showMainMenu);
                backToMenuBtnQuiz.addEventListener('click', showMainMenu);
                closeModalBtn.addEventListener('click', () => studyGuideModal.classList.add('hidden'));
                nextBtn.addEventListener('click', prepareNextStep);
                resumeQuizBtn.addEventListener('click', resumeQuiz);
                infoBtn.addEventListener('click', () => {
                    studyGuideContent.classList.toggle('expanded');
                });
                soundToggleBtn.addEventListener('click', () => {
                    soundsEnabled = !soundsEnabled;
                    soundOnIcon.classList.toggle('hidden');
                    soundOffIcon.classList.toggle('hidden');
                    setCookie('soundEnabled', soundsEnabled, 365);
                    if (!soundsEnabled) {
                        window.speechSynthesis.cancel();
                    }
                });

                const soundPreference = getCookie('soundEnabled');
                if (soundPreference === 'false') {
                    soundsEnabled = false;
                    soundOnIcon.classList.add('hidden');
                    soundOffIcon.classList.remove('hidden');
                }

                generateAndSetAudio();
            }
            
            function prepareNextStep() {
                if (questionsSinceBreak > 0 && questionsSinceBreak % 6 === 0 && currentQuestionIndex < shuffledQuestions.length) {
                    showArtBreak();
                } else {
                    setNextQuestion();
                }
            }
            
            function showArtBreak() {
                quizScreen.classList.add('hidden');
                brainBreakScreen.classList.remove('hidden');
                
                const breakType = brainBreakCounter % 3; 
                cleanupBreakAnimation(); 

                switch(breakType) {
                    case 0:
                        setupBouncingBalls();
                        break;
                    case 1:
                        setupStarfield();
                        break;
                    case 2:
                        setupFollower();
                        break;
                }
                brainBreakCounter++;
                
                let timeLeft = 30;
                timerDisplay.textContent = `Time left: ${timeLeft}s`;
                breakTimerInterval = setInterval(() => {
                    timeLeft--;
                    timerDisplay.textContent = `Time left: ${timeLeft}s`;
                    if (timeLeft <= 0) {
                        resumeQuiz();
                    }
                }, 1000);
            }
            
            function resumeQuiz() {
                if(breakTimerInterval) clearInterval(breakTimerInterval);
                if(animationFrameId) cancelAnimationFrame(animationFrameId);
                breakTimerInterval = null;
                animationFrameId = null;
                
                cleanupBreakAnimation();

                brainBreakScreen.classList.add('hidden');
                quizScreen.classList.remove('hidden');
                setNextQuestion();
            }

            function setNextQuestion() {
                resetState();
                if (currentQuestionIndex < shuffledQuestions.length) {
                    showQuestion(shuffledQuestions[currentQuestionIndex]);
                } else {
                    showEndScreen();
                }
            }
            
            function showQuestion(question) {
                if(question.isRetry){
                    questionCounterDisplay.innerHTML = `Question <span id="question-number">${questionsAnsweredFirstTry + 1}</span> of <span id="total-questions">${totalOriginalQuestions}</span> (Repeat)`;
                } else {
                    questionCounterDisplay.innerHTML = `Question <span id="question-number">${questionsAnsweredFirstTry + 1}</span> of <span id="total-questions">${totalOriginalQuestions}</span>`;
                }

                questionReferenceEl.innerText = question.reference;

                questionContainer.innerHTML = ''; 
                const questionTextEl = document.createElement('h2');
                questionTextEl.innerText = question.question;
                questionTextEl.classList.add('text-xl', 'md:text-2xl', 'font-semibold', 'text-gray-800', 'flex-grow');
                const questionSpeakerBtn = createSpeakerButton(question.question);
                questionContainer.appendChild(questionTextEl);
                questionContainer.appendChild(questionSpeakerBtn);

                const shuffledAnswers = [...question.answers].sort(() => Math.random() - 0.5);
                const allAnswersShort = shuffledAnswers.every(answer => answer.text.length < 25);
                if (allAnswersShort) {
                    answerButtonsEl.classList.add('md:grid-cols-3');
                }

                shuffledAnswers.forEach(answer => {
                    const button = document.createElement('button');
                    button.classList.add('bg-white', 'hover:bg-blue-100', 'text-gray-800', 'font-semibold', 'py-3', 'px-5', 'rounded-lg', 'border', 'border-gray-300', 'transition', 'duration-200', 'w-full', 'flex', 'items-center', 'justify-between');

                    const answerTextSpan = document.createElement('span');
                    answerTextSpan.innerText = answer.text;
                    answerTextSpan.classList.add('text-left');

                    const answerSpeakerBtn = createSpeakerButton(answer.text);
                    
                    button.appendChild(answerTextSpan);
                    button.appendChild(answerSpeakerBtn);

                    if (answer.correct) {
                        button.dataset.correct = answer.correct;
                    }
                    button.addEventListener('click', selectAnswer);
                    answerButtonsEl.appendChild(button);
                });
            }


            function resetState() {
                if (advanceTimeout) {
                    clearTimeout(advanceTimeout);
                    advanceTimeout = null;
                }
                nextBtn.classList.add('hidden');
                feedbackEl.innerText = '';
                const highlightedSpan = studyGuideContent.querySelector('span.bg-yellow-200');
                if (highlightedSpan) {
                    studyGuideContent.innerHTML = studyGuideContent.innerHTML.replace(/<span class="bg-yellow-200 rounded font-bold px-1">/g, '').replace(/<\/span>/g, '');
                }
                studyGuideContent.classList.remove('expanded');
                answerButtonsEl.classList.remove('md:grid-cols-3');
                while (answerButtonsEl.firstChild) {
                    answerButtonsEl.removeChild(answerButtonsEl.firstChild);
                }
            }

            function selectAnswer(e) {
                const selectedBtn = e.currentTarget;
                const isCorrect = selectedBtn.dataset.correct === 'true';
                const currentQuestion = shuffledQuestions[currentQuestionIndex];

                if(!currentQuestion.isRetry) {
                    questionsAnsweredFirstTry++;
                }

                questionsSinceBreak++;

                if (isCorrect) {
                    if(soundsEnabled) correctSound.play();
                    if (!currentQuestion.isRetry) {
                        score++;
                    }
                    const randomEmoji = correctEmojis[Math.floor(Math.random() * correctEmojis.length)];
                    feedbackEl.innerText = `Correct! ${randomEmoji}`;
                    feedbackEl.classList.remove('text-red-500');
                    feedbackEl.classList.add('text-green-500');
                    triggerConfetti();
                    advanceTimeout = setTimeout(prepareNextStep, 3000); 
                } else {
                    if(soundsEnabled) incorrectSound.play();
                    score--;
                    if (score < 0) score = 0;
                    feedbackEl.innerText = 'Incorrect! We\'ll try this one again later.';
                    feedbackEl.classList.remove('text-green-500');
                    feedbackEl.classList.add('text-red-500');
                    currentQuestion.isRetry = true;
                    shuffledQuestions.push(currentQuestion);
                    nextBtn.classList.remove('hidden'); 
                }

                scoreEl.innerText = score;

                Array.from(answerButtonsEl.children).forEach(button => {
                    button.disabled = true;
                    button.classList.remove('hover:bg-blue-100');
                    if (button.dataset.correct) {
                        button.classList.remove('text-gray-800');
                        button.classList.add('flash-correct', 'bg-green-400', 'text-black', 'font-bold');
                    } else if (!isCorrect) {
                        button.classList.add('flash-incorrect', 'bg-red-400', 'text-white');
                    }
                });
                
                studyGuideContent.classList.add('expanded');
                const highlightTerm = currentQuestion.highlightTerm;

                if (highlightTerm) {
                    const escapedTerm = highlightTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                    const regex = new RegExp(`(${escapedTerm})`, 'gi');
                    studyGuideContent.innerHTML = studyGuideContent.innerHTML.replace(regex, `<span class="bg-yellow-200 rounded font-bold px-1">$1</span>`);
                }

                currentQuestionIndex++;
            }

            function showEndScreen() {
                quizScreen.classList.add('hidden');
                endScreen.classList.remove('hidden');
                
                const percentage = totalOriginalQuestions > 0 ? Math.round((score / totalOriginalQuestions) * 100) : 0;
                finalScoreEl.innerText = `${percentage}%`;
                
                const highScoreCookieName = `highScore_${currentUnitId}`;
                const highScore = parseInt(getCookie(highScoreCookieName)) || 0;
                
                if (percentage > highScore) {
                    setCookie(highScoreCookieName, percentage, 365);
                    if (percentage === 100) {
                        endMessageEl.innerText = "Wow! A new high score and a perfect game! 🤩";
                    } else {
                        endMessageEl.innerText = "New High Score! Can you get a perfect score next time? 🤔";
                    }
                } else {
                    if (percentage === 100) {
                        endMessageEl.innerText = "A perfect score! You're a genius! 🏆";
                    } else {
                        endMessageEl.innerText = `Good job! Your high score is still ${highScore}%. Try again to beat it! 💪`;
                    }
                }
            }
            
             function speakText(text) {
                if ('speechSynthesis' in window && soundsEnabled) {
                    window.speechSynthesis.cancel(); 
                    const utterance = new SpeechSynthesisUtterance(text);
                    window.speechSynthesis.speak(utterance);
                }
            }

            function createSpeakerButton(textToSpeak) {
                const button = document.createElement('button');
                button.classList.add('p-2', 'rounded-full', 'hover:bg-gray-200', 'transition-colors', 'duration-200', 'flex-shrink-0');
                button.innerHTML = `<svg class="w-6 h-6 text-gray-500 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"></path></svg>`;
                button.addEventListener('click', (e) => {
                    e.stopPropagation(); 
                    speakText(textToSpeak);
                });
                return button;
            }
            
            function cleanupBreakAnimation() {
                currentBreakListeners.forEach(({ event, handler }) => {
                    breakCanvas.removeEventListener(event, handler);
                });
                currentBreakListeners = [];
                breakCanvas.style.cursor = 'default';
                breakCanvas.style.backgroundColor = 'white';
            }

            function addBreakListener(event, handler) {
                breakCanvas.addEventListener(event, handler);
                currentBreakListeners.push({ event, handler });
            }
            
            function setupBouncingBalls() {
                breakInstructions.textContent = "Click a ball to pop it. Click empty space to add one.";
                breakCanvas.style.cursor = 'pointer';
                breakCanvas.style.backgroundColor = 'white';
                const breakCtx = breakCanvas.getContext('2d');
                let balls = [];
                const colors = ['#ef4444', '#f97316', '#eab308', '#84cc16', '#22c55e', '#14b8a6', '#3b82f6', '#8b5cf6', '#d946ef'];
                for(let i = 0; i < 15; i++) {
                    balls.push(createBall());
                }

                function createBall(x, y) {
                    return {
                        x: x || Math.random() * breakCanvas.width, 
                        y: y || Math.random() * breakCanvas.height,
                        vx: (Math.random() - 0.5) * 4, 
                        vy: (Math.random() - 0.5) * 4,
                        radius: Math.random() * 10 + 10, 
                        color: colors[Math.floor(Math.random() * colors.length)]
                    };
                }

                const ballClickHandler = (e) => {
                    const rect = breakCanvas.getBoundingClientRect();
                    const x = (e.clientX || e.touches[0].clientX) - rect.left;
                    const y = (e.clientY || e.touches[0].clientY) - rect.top;
                    let ballPopped = false;
                    for(let i = balls.length - 1; i >= 0; i--) {
                        const ball = balls[i];
                        const distance = Math.sqrt(Math.pow(x - ball.x, 2) + Math.pow(y - ball.y, 2));
                        if(distance < ball.radius) {
                            balls.splice(i, 1);
                            ballPopped = true;
                            break;
                        }
                    }
                    if(!ballPopped) {
                        balls.push(createBall(x,y));
                    }
                };
                addBreakListener('click', ballClickHandler);
                addBreakListener('touchstart', ballClickHandler);

                function animate() {
                    animationFrameId = requestAnimationFrame(animate);
                    breakCtx.clearRect(0, 0, breakCanvas.width, breakCanvas.height);
                    balls.forEach(ball => {
                        ball.x += ball.vx; ball.y += ball.vy;
                        if(ball.y + ball.vy > breakCanvas.height || ball.y + ball.vy < 0) ball.vy = -ball.vy;
                        if(ball.x + ball.vx > breakCanvas.width || ball.x + ball.vx < 0) ball.vx = -ball.vx;
                        breakCtx.beginPath();
                        breakCtx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2, false);
                        breakCtx.fillStyle = ball.color;
                        breakCtx.fill();
                        breakCtx.closePath();
                    });
                }
                animate();
            }

            function setupStarfield() {
                breakInstructions.textContent = "Move your mouse or finger to fly through space!";
                breakCanvas.style.cursor = 'crosshair';
                breakCanvas.style.backgroundColor = 'black';
                const breakCtx = breakCanvas.getContext('2d');
                const numStars = 500;
                let stars = [];
                let speed = 1.25;
                let centerX = breakCanvas.width / 2;
                let centerY = breakCanvas.height / 2;

                for (let i = 0; i < numStars; i++) {
                    stars[i] = {
                        x: (Math.random() - 0.5) * breakCanvas.width,
                        y: (Math.random() - 0.5) * breakCanvas.height,
                        z: Math.random() * breakCanvas.width
                    };
                }

                const starfieldHandler = (e) => {
                    const rect = breakCanvas.getBoundingClientRect();
                    centerX = (e.clientX || e.touches[0].clientX) - rect.left;
                    centerY = (e.clientY || e.touches[0].clientY) - rect.top;
                };

                addBreakListener('mousemove', starfieldHandler);
                addBreakListener('touchmove', (e) => { e.preventDefault(); starfieldHandler(e); });

                function animate() {
                    animationFrameId = requestAnimationFrame(animate);
                    breakCtx.fillStyle = "rgba(0, 0, 0, 0.2)";
                    breakCtx.fillRect(0, 0, breakCanvas.width, breakCanvas.height);
                    
                    for (let star of stars) {
                        star.z -= speed;
                        if (star.z <= 0) {
                            star.x = (Math.random() - 0.5) * breakCanvas.width;
                            star.y = (Math.random() - 0.5) * breakCanvas.height;
                            star.z = breakCanvas.width;
                        }

                        const k = 128 / star.z;
                        const px = star.x * k + centerX;
                        const py = star.y * k + centerY;

                        if (px >= 0 && px <= breakCanvas.width && py >= 0 && py <= breakCanvas.height) {
                            const size = (1 - star.z / breakCanvas.width) * 5;
                            breakCtx.beginPath();
                            breakCtx.arc(px, py, size, 0, Math.PI * 2);
                            breakCtx.fillStyle = 'white';
                            breakCtx.fill();
                        }
                    }
                }
                animate();
            }

            function setupFollower() {
                breakInstructions.textContent = "Move your mouse or finger!";
                breakCanvas.style.cursor = 'crosshair';
                breakCanvas.style.backgroundColor = 'white';
                const breakCtx = breakCanvas.getContext('2d');
                let trail = [];
                let hue = 0;
                const followerHandler = (e) => {
                    const rect = breakCanvas.getBoundingClientRect();
                    const x = (e.clientX || e.touches[0].clientX) - rect.left;
                    const y = (e.clientY || e.touches[0].clientY) - rect.top;
                    hue = (hue + 3) % 360;
                    trail.push({ x, y, size: 15, opacity: 1, color: `hsl(${hue}, 80%, 60%)`});
                    if(trail.length > 50) trail.shift();
                };
                addBreakListener('mousemove', followerHandler);
                addBreakListener('touchmove', (e) => { e.preventDefault(); followerHandler(e); });

                function animate() {
                    animationFrameId = requestAnimationFrame(animate);
                    breakCtx.fillStyle = 'rgba(255, 255, 255, 0.2)';
                    breakCtx.fillRect(0, 0, breakCanvas.width, breakCanvas.height);
                    trail.forEach(p => {
                        p.size *= 0.97;
                        breakCtx.beginPath();
                        breakCtx.arc(p.x, p.y, p.size, 0, 2 * Math.PI);
                        breakCtx.fillStyle = p.color;
                        breakCtx.fill();
                    });
                }
                animate();
            }

            function triggerConfetti() {
                const rect = confettiCanvas.parentElement.getBoundingClientRect();
                confettiCanvas.width = rect.width;
                confettiCanvas.height = rect.height;
                confettiPieces = [];
                for (let i = 0; i < 100; i++) {
                    confettiPieces.push(createConfettiPiece());
                }
                animateConfetti();
            }

            function createConfettiPiece() {
                const colors = ['#ef4444', '#f97316', '#eab308', '#84cc16', '#22c55e', '#14b8a6', '#3b82f6', '#8b5cf6', '#d946ef'];
                const x = confettiCanvas.width / 2;
                const y = confettiCanvas.height / 2;
                return { x: x, y: y, size: Math.random() * 8 + 5, color: colors[Math.floor(Math.random() * colors.length)], vx: (Math.random() - 0.5) * 10, vy: (Math.random() - 0.7) * 12, gravity: 0.3, opacity: 1, angle: Math.random() * Math.PI * 2, spin: (Math.random() - 0.5) * 0.2 };
            }

            function animateConfetti() {
                confettiCtx.clearRect(0, 0, confettiCanvas.width, confettiCanvas.height);
                let activePieces = false;
                confettiPieces.forEach(piece => {
                    if (piece.opacity > 0) {
                        activePieces = true;
                        piece.vy += piece.gravity;
                        piece.x += piece.vx;
                        piece.y += piece.vy;
                        piece.angle += piece.spin;
                        piece.opacity -= 0.01;
                        confettiCtx.save();
                        confettiCtx.globalAlpha = piece.opacity;
                        confettiCtx.translate(piece.x, piece.y);
                        confettiCtx.rotate(piece.angle);
                        confettiCtx.fillStyle = piece.color;
                        confettiCtx.fillRect(-piece.size / 2, -piece.size / 2, piece.size, piece.size);
                        confettiCtx.restore();
                    }
                });
                if (activePieces) requestAnimationFrame(animateConfetti);
                else confettiCtx.clearRect(0, 0, confettiCanvas.width, confettiCanvas.height);
            }
            
            function generateAndSetAudio() {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                function createSound(frequency, duration) {
                    const sampleRate = audioContext.sampleRate;
                    const numFrames = sampleRate * duration;
                    const buffer = audioContext.createBuffer(1, numFrames, sampleRate);
                    const data = buffer.getChannelData(0);
                    for (let i = 0; i < numFrames; i++) {
                        data[i] = Math.sin(2 * Math.PI * frequency * i / sampleRate) * Math.exp(-i / sampleRate / (duration/4));
                    } return buffer;
                }
                function bufferToWave(buffer) {
                    const numOfChan = buffer.numberOfChannels, len = buffer.length * numOfChan * 2, bufferArr = new ArrayBuffer(44 + len), view = new DataView(bufferArr), channels = [], sampleRate = buffer.sampleRate;
                    let pos = 0;
                    function setUint16(data) { view.setUint16(pos, data, true); pos += 2; }
                    function setUint32(data) { view.setUint32(pos, data, true); pos += 4; }
                    setUint32(0x46464952); setUint32(36 + len); setUint32(0x45564157); setUint32(0x20746d66); setUint32(16); setUint16(1); setUint16(numOfChan); setUint32(sampleRate); setUint32(sampleRate * 2 * numOfChan); setUint16(numOfChan * 2); setUint16(16); setUint32(0x61746164); setUint32(len);
                    for (var i = 0; i < buffer.numberOfChannels; i++) channels.push(buffer.getChannelData(i));
                    while (pos < 44) view.setUint8(pos++, 0);
                    for (var i = 0; i < buffer.length; i++) {
                        for (var j = 0; j < numOfChan; j++) {
                            let s = Math.max(-1, Math.min(1, channels[j][i]));
                            view.setInt16(pos, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
                            pos += 2;
                        }
                    } return new Blob([view], { type: 'audio/wav' });
                }
                correctSound.src = URL.createObjectURL(bufferToWave(createSound(523.25, 0.2)));
                incorrectSound.src = URL.createObjectURL(bufferToWave(createSound(261.63, 0.3)));
            }

            initialize();
        });
    </script>
</body>
</html>

